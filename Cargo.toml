[package]
name = "rgbds"
version = "0.1.0"
edition = "2021"
rust-version = "1.73" # 1.74 dropped support for older Apple platforms we wish to keep supporting.
description = "The premier Game Boy assembly toolchain"
authors = ["RGBDS maintainers <rgbds@gbdev.io>"]
homepage = "http://rgbds.gbdev.io"
repository = "https://github.com/gbdev/rgbds"
license = "MPL-2.0"
keywords = ["rgbds", "gameboy", "asm", "assembly", "gamedev"]
categories = [
	"command-line-utilities",
	"development-tools::debugging",
	"game-development",
]

[features]
# People will primarily want to `cargo install` this crate.
default = ["rgbasm", "rgblink", "rgbfix", "rgbgfx"]

rgbasm = [
	# CLI.
	"dep:clap",
	"dep:os_info",
	"dep:ariadne",
	"dep:yansi",
	"dep:shadow-rs",
	"dep:sysexits",
	# Specific deps.
	"dep:chrono",
	"dep:compact_str",
	"dep:indexmap",
	"dep:phf",
	"dep:rustc-hash",
	"dep:string-interner",
	"dep:strum_macros",
	"dep:unicase",
]
rgblink = [
	# CLI.
	"dep:clap",
	"dep:os_info",
	"dep:ariadne",
	"dep:yansi",
	"dep:shadow-rs",
	"dep:sysexits",
]
rgbfix = [
	# CLI.
	"dep:clap",
	"dep:os_info",
	"dep:ariadne",
	"dep:yansi",
	"dep:shadow-rs",
	"dep:sysexits",
]
rgbgfx = [
	# CLI.
	"dep:clap",
	"dep:os_info",
	"dep:ariadne",
	"dep:yansi",
	"dep:shadow-rs",
	"dep:sysexits",
	# Specific deps.
	"dep:arrayvec",
	"dep:bitvec",
	"dep:cfg-if",
	"dep:funty",
	"dep:plumers",
]

[dependencies] # TODO: audit deps & features
# TODO: use `thiserror` instead
parse-display = { version = "0.9", default-features = false }
thiserror = "2.0.12"
try-from-discrim = "1.0"

# The binaries' deps.

ariadne = { version = "0.5", optional = true }
arrayvec = { version = "0.7", optional = true }
bitvec = { version = "1.0", optional = true }
cfg-if = { version = "1.0", optional = true }
chrono = { version = "0.4.40", optional = true }
clap = { version = "4.4", features = ["derive", "wrap_help"], optional = true }
compact_str = { version = "0.9.0", optional = true }
funty = { version = "2.0", optional = true }
indexmap = { version = "2.9.0", optional = true }
os_info = { version = "3.10", default-features = false, optional = true }
phf = { version = "0.11.3", features = ["macros", "unicase"], optional = true }
plumers = { version = "1.0", optional = true }
rustc-hash = { version = "2.1.1", optional = true }
# More recent versions are incompatible with Rust 1.73, but don't declare it,
# causing `cargo update` to break the build.
shadow-rs = { version = "=1.0.0", optional = true, default-features = false, features = [
	"git2",
] }
# TODO: maybe use feature `inline-more`
string-interner = { version = "0.19", default-features = false, features = [
	"std",
	"backends",
], optional = true }
strum_macros = { version = "0.27.1", optional = true }
sysexits = { version = "0.8", optional = true }
unicase = { version = "2.8.1", optional = true }
yansi = { version = "1.0", features = [
	"detect-env",
	"detect-tty",
	"hyperlink",
], optional = true }

[build-dependencies]
# More recent versions are incompatible with Rust 1.73, but don't declare it,
# causing `cargo update` to break the build.
shadow-rs = { version = "=1.0.0", optional = true, default-features = false, features = [
	"build",
	"git2",
] }

[dev-dependencies]
libtest-mimic = "0.8.1"
snapbox = { version = "0.6.21", features = ["path", "cmd"] }

[patch.crates-io]
ariadne = { git = "https://github.com/ISSOtm/ariadne.git", branch = "write_refactor" }

[[bin]]
name = "rgbasm"
path = "src/asm/main.rs"
required-features = ["rgbasm"]

[[bin]]
name = "rgbgfx"
path = "src/gfx/main.rs"
required-features = ["rgbgfx"]

[[test]]
name = "rgbgfx"
harness = false
required-features = ["rgbgfx"]

# The profile that 'cargo dist' will build with
# NOTE: for extra savings, pass `-Z build-std` to Cargo, and `-Zlocation-detail=none` to rustc (via RUSTFLAGS or other).
[profile.dist]
inherits = "release"
# NOTE: to enable LTO across programming language boundaries, see the "Linker-plugin-based LTO" chapter
# of the rustc book.
# To ensure LLD is the proper version, consider:
# $ rustup component add llvm-tools
# $ ln -s $(rustup which ../lib/rustlib/x86_64-unknown-linux-gnu/bin/rust-lld) ld.lld
# $ RUSTFLAGS="-Clinker-plugin-lto -Clinker=clang -Clink-arg=-fuse-ld=$PWD/ld.lld -Clink-arg=-flto=thin" ...
lto = "thin"
codegen-units = 1
# This deflates the binaries' size further, but at the cost of no backtraces in crash reports, making them hardly useful.
#panic = "abort"
